package com.isartdigital.perle.ui.hud.ftue;

import com.isartdigital.perle.game.managers.FtueManager;
import com.isartdigital.utils.events.MouseEventType;
import com.isartdigital.utils.ui.smart.SmartButton;
import com.isartdigital.utils.ui.smart.SmartComponent;
import com.isartdigital.utils.ui.smart.SmartScreen;
import com.isartdigital.utils.ui.smart.TextSprite;
import flump.library.SpriteSymbol;
import pixi.core.display.Container;
import pixi.flump.Sprite;

typedef Dialogue = {
	var npc:String;
	var npc_text:String;
}	
/**
 * ...
 * @author Rafired
 */
class FtueUI extends SmartScreen 
{
	private static inline var WIREFRAME:String = "Window_NPC";
	private static inline var WIREFRAME_BUTTON:String = WIREFRAME+"_ButtonNext";
	private static inline var WIREFRAME_HELL:String = WIREFRAME+"_Hell";
	private static inline var WIREFRAME_HEAVEN:String = WIREFRAME+"_Heaven";
	private static inline var WIREFRAME_NAME:String = WIREFRAME+"_Name_TXT";
	private static inline var WIREFRAME_SPEACH:String = WIREFRAME+"_Speech_TXT";
	
	private var btnNext:SmartButton;
	private var npc_name:TextSprite;
	private var npc_speach:TextSprite;
	private var actualDialogue:Int = 0;
	private var numberOfDialogue = 7;
	
	public static var npc_dialogue(default, never):Map<String, Dialogue> = [
		"Dialogue1"=> {npc: "Laink", npc_text: "eh terra"},
		"Dialogue2" => {npc: "Terracid", npc_text: "quoi ?"},
		"Dialogue3" => {npc: "Laink", npc_text: "on joue ?"},
		"Dialogue4" => {npc: "Laink", npc_text: "ptdr"},
		"Dialogue5" => {npc: "Terracid", npc_text: "ok lol"},
		"Dialogue6" => {npc: "Laink", npc_text: "sexe"},
		"Dialogue7" => {npc: "Laink", npc_text: "je peux écrire ici aussi lol h4x"},
	];
	
	/**
	 * instance unique de la classe FtueUI
	 */
	private static var instance: FtueUI;
	
	/**
	 * Retourne l'instance unique de la classe, et la crée si elle n'existait pas au préalable
	 * @return instance unique
	 */
	public static function getInstance (): FtueUI {
		if (instance == null) instance = new FtueUI();
		return instance;
	}
	
	/**
	 * constructeur privé pour éviter qu'une instance soit créée directement
	 */
	private function new(pID:String=null) 
	{
		super(WIREFRAME);
		modal = null;
		setWireframe();
		createText();
	}
	
	//Close Ftue
	private function closeFtue() {
		btnNext.removeAllListeners();
		FtueManager.removeFtue();
	}
	
	//Set all the variables to the wireframe
	private function setWireframe():Void {
		npc_name = cast(getChildByName(WIREFRAME_NAME), TextSprite);	
		npc_speach = cast(getChildByName(WIREFRAME_SPEACH), TextSprite);	
		btnNext = cast(getChildByName(WIREFRAME_BUTTON), SmartButton);
		btnNext.on(MouseEventType.CLICK, onClickNext);
	}
	
	//Button
	private function onClickNext():Void {
		npc_speach.x = 0;
		createText();
	}
	
	//Create Text generated by the map
	private function createText():Void {
		actualDialogue++;
		if (actualDialogue >= numberOfDialogue+1) {
			closeFtue();
			return;
		}
		npc_name.text = npc_dialogue["Dialogue" + actualDialogue].npc;
		npc_speach.text = (npc_dialogue["Dialogue" + actualDialogue].npc_text);
		//npc_speach.x -= npc_speach.width / 2;
		changeAlpha(npc_dialogue["Dialogue" + actualDialogue].npc);
	}
	
	//function to change the alpha of the NPC who talk
	private function changeAlpha(pName:String) {
		if (pName == "Laink") {
			getChildByName(WIREFRAME_HEAVEN).alpha = 0.5;
			getChildByName(WIREFRAME_HELL).alpha = 1;
		}
		else {
			getChildByName(WIREFRAME_HEAVEN).alpha = 1;
			getChildByName(WIREFRAME_HELL).alpha = 0.5;
		}
	}

	/**
	 * détruit l'instance unique et met sa référence interne à null
	 */
	override public function destroy (): Void {
		instance = null;
		super.destroy();
	}

}