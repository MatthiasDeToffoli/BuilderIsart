package com.isartdigital.perle.ui.hud.ftue;

import com.isartdigital.perle.game.AssetName;
import com.isartdigital.perle.game.managers.FtueManager;
import com.isartdigital.perle.game.managers.SaveManager;
import com.isartdigital.utils.events.MouseEventType;
import com.isartdigital.utils.ui.smart.SmartButton;
import com.isartdigital.utils.ui.smart.SmartComponent;
import com.isartdigital.utils.ui.smart.SmartScreen;
import com.isartdigital.utils.ui.smart.TextSprite;
import flump.library.SpriteSymbol;
import pixi.core.display.Container;
import pixi.flump.Sprite;

typedef Dialogue = {
	var npc:String;
	var npc_text:String;
}	
/**
 * ...
 * @author Alexis
 */
class FtueUI extends SmartScreen 
{
	
	
	private var btnNext:SmartButton;
	private var npc_name:TextSprite;
	private var npc_speach:TextSprite;
	public static var actualDialogue:Int;
	public static var numberOfDialogue:Int;
	public static var firstToSpeak:String;
	
	//Array of the dialogue
	public static var lNpc_dialogue_ftue:Array<Array<Array<String>>>;
	
	/**
	 * instance unique de la classe FtueUI
	 */
	private static var instance: FtueUI;
	
	/**
	 * Retourne l'instance unique de la classe, et la crée si elle n'existait pas au préalable
	 * @return instance unique
	 */
	public static function getInstance (): FtueUI {
		if (instance == null) instance = new FtueUI();
		return instance;
	}
	
	/**
	 * constructeur privé pour éviter qu'une instance soit créée directement
	 */
	private function new(pID:String=null) 
	{
		super(AssetName.FTUE);
		modal = null;
		setWireframe();
	}
	
	/**
	 * Close Ftue
	 */
	private function closeFtue() {
		btnNext.removeAllListeners();
		FtueManager.removeFtue();
	}
	
	/**
	 * Set all the variables to the wireframe
	 */
	private function setWireframe():Void {
		npc_name = cast(getChildByName(AssetName.FTUE_NAME), TextSprite);	
		npc_speach = cast(getChildByName(AssetName.FTUE_SPEACH), TextSprite);	
		btnNext = cast(getChildByName(AssetName.FTUE_BUTTON), SmartButton);
		btnNext.on(MouseEventType.CLICK, onClickNext);
	}
	
	/**
	 * Button
	 */
	private function onClickNext():Void {
		//npc_speach.x = 0;
		createText();
	}
	
	/**
	 * Create Text generated by the map
	 */
	public function createText():Void {
		if (actualDialogue >= numberOfDialogue) {
			actualDialogue++;
			SaveManager.save();
			closeFtue();
			return;
		}
		npc_name.text = FtueManager.npc_dialogue_ftue[actualDialogue][0][0];
		npc_speach.text = FtueManager.npc_dialogue_ftue[actualDialogue][0][1];
		//npc_speach.x -= npc_speach.width / 2;
		changeAlpha(FtueManager.npc_dialogue_ftue[actualDialogue][0][0]);
		SaveManager.save();
		actualDialogue++;
	}
	
	/**
	 * function to change the alpha of the NPC who talk
	 * @param	pName of NPC
	 */
	private function changeAlpha(pName:String) {
		if (pName == firstToSpeak) {
			getChildByName(AssetName.FTUE_HEAVEN).alpha = 0.5;
			getChildByName(AssetName.FTUE_HELL).alpha = 1;
		}
		else {
			getChildByName(AssetName.FTUE_HEAVEN).alpha = 1;
			getChildByName(AssetName.FTUE_HELL).alpha = 0.5;
		}
	}

	/**
	 * détruit l'instance unique et met sa référence interne à null
	 */
	override public function destroy (): Void {
		instance = null;
		super.destroy();
	}

}